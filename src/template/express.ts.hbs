/* tslint:disable */
/* eslint-disable */
import express from 'express'
import { RuntimeResponse, Validator } from 'typoa'

{{#if securityMiddleware}}
import { securityMiddleware } from '{{securityMiddleware}}'
{{/if}}

{{#each controllers}}
import { {{name}} } from '{{path}}'
{{#each methods}}
{{#if bodyDiscriminator}}
import { {{bodyDiscriminator.name}} } from '{{bodyDiscriminator.path}}'
{{/if}}
{{/each}}
{{/each}}

{{#each middlewares}}
import { {{name}} } from '{{relativePath}}'
{{/each}}

const schemas = {{json schemas}}

export function bindToRouter (router: express.Router) {
  {{#each controllers}}
  {{#each methods}}
  router.{{verb}}('{{endpoint}}'{{#each security}}, securityMiddleware({{json this}}){{/each}}{{#each middlewares}}, {{#if this.args}}{{this.name}}({{#each this.args}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}){{else}}{{this.name}}{{/if}}{{/each}}, async (req: express.Request, res: express.Response, next: express.NextFunction) => {
    try {
      const controller = new {{../name}}()
      const data = await controller.{{name}}.apply(
        controller,
        await Validator.validateAndParse(
          req, 
          schemas as any,
          {
            params: {{json params}},
            body: {{#if body}}{{json body}}{{else}}undefined{{/if}},
            bodyDiscriminatorFn: {{#if bodyDiscriminator}}{{bodyDiscriminator.name}}{{else}}undefined{{/if}}
          }
        ) as any
      )
      {{#if validateResponse}}
      const validatedData = Validator.validateAndParseResponse(
        data, 
        schemas as any,
        {{json responses}},
        ('getStatus' in controller ? (controller as any).getStatus()?.toString() : undefined) ?? (typeof data !== 'undefined' && data !== null ? '200' : '204'),
        ((('getHeaders' in controller ? (controller as any).getHeaders()?.['content-type'] : undefined) ?? '{{contentType}}')).split(';')[0]
      )
      RuntimeResponse.send(controller, validatedData, res, '{{contentType}}')
      {{else}}
      RuntimeResponse.send(controller, data, res, '{{contentType}}')
      {{/if}}
    } catch (err) {
      return next(err)
    }
  })
  {{/each}}
  {{/each}}
}
