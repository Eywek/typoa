{
	"openapi": "3.0.0",
	"info": {
		"title": "my-service",
		"version": "1.0.0",
		"description": "# Errors\n| Error code | Status code | Payload | Description | HTTP Code |\n| :--- | :--- | :--- | :--- | :--- |\n| 910 |  | ```{\"number\":\"number\"}``` | Description for my response | 400 |\n| 911 | 404 |  |  | 404 |"
	},
	"paths": {
		"/my-route": {
			"get": {
				"operationId": "Get",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"type": "object",
											"properties": {
												"bar": {
													"type": "string",
													"enum": [
														"bare"
													]
												},
												"foo": {
													"type": "string"
												}
											},
											"required": [
												"bar",
												"foo"
											]
										},
										{
											"type": "object",
											"properties": {
												"id": {
													"type": "number"
												}
											},
											"required": [
												"id"
											]
										},
										{
											"type": "object",
											"properties": {
												"h": {
													"oneOf": [
														{
															"type": "string",
															"enum": [
																"hi"
															]
														},
														{
															"type": "string",
															"enum": [
																"hello"
															]
														}
													]
												},
												"true": {
													"type": "boolean",
													"enum": [
														"true"
													]
												},
												"false": {
													"type": "boolean",
													"enum": [
														"false"
													]
												}
											},
											"required": [
												"h",
												"true",
												"false"
											]
										}
									]
								}
							}
						}
					}
				},
				"description": "My OpenAPI description",
				"tags": [
					"my-tag"
				],
				"security": []
			},
			"post": {
				"operationId": "Post",
				"parameters": [
					{
						"name": "my-param",
						"in": "query",
						"schema": {
							"type": "string"
						},
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"type": "object",
											"properties": {
												"foo": {
													"allOf": [
														{
															"type": "object",
															"properties": {
																"value": {
																	"type": "string"
																}
															},
															"required": [
																"value"
															]
														},
														{
															"type": "object",
															"properties": {
																"bar": {
																	"type": "string"
																}
															},
															"required": [
																"bar"
															]
														}
													]
												}
											},
											"required": [
												"foo"
											]
										},
										{
											"type": "object",
											"properties": {
												"fobar": {
													"type": "number"
												}
											},
											"required": [
												"fobar"
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"my-tag",
					"my-post-tag"
				],
				"security": []
			}
		},
		"/my-2nd-route": {
			"post": {
				"operationId": "PostRaw",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"fooPost": {
											"type": "string"
										},
										"barPost": {
											"type": "object",
											"properties": {
												"barFooPost": {
													"type": "string"
												}
											},
											"required": [
												"barFooPost"
											]
										}
									},
									"required": [
										"fooPost",
										"barPost"
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"type": "object",
											"properties": {
												"error_code": {
													"type": "number",
													"enum": [
														911
													]
												},
												"status_code": {
													"type": "number",
													"enum": [
														404
													]
												}
											},
											"required": [
												"error_code",
												"status_code"
											]
										},
										{
											"properties": {
												"foo": {
													"enum": [
														"bar"
													],
													"type": "string"
												}
											},
											"required": [
												"foo"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"my-tag"
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/Datasource_Without_Version_Versions"
									},
									{
										"$ref": "#/components/schemas/DatasourceVersion"
									}
								]
							}
						}
					}
				},
				"security": []
			}
		},
		"/{id}": {
			"patch": {
				"operationId": "Patch",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"schema": {
							"type": "string"
						},
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"enum": {
											"$ref": "#/components/schemas/MyEnum"
										},
										"date": {
											"type": "string",
											"format": "date-time"
										},
										"recordString": {
											"type": "object",
											"properties": {},
											"additionalProperties": {
												"type": "string"
											}
										},
										"record": {
											"type": "object",
											"properties": {
												"foo": {
													"type": "string"
												}
											},
											"required": [
												"foo"
											]
										},
										"mappedType": {
											"type": "object",
											"properties": {},
											"additionalProperties": {
												"type": "number"
											}
										},
										"emptyObject": {
											"type": "object",
											"properties": {}
										}
									},
									"required": [
										"enum",
										"recordString",
										"record",
										"mappedType",
										"emptyObject"
									]
								}
							}
						}
					},
					"400": {
						"description": "Description for my response",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error_code": {
											"type": "number",
											"enum": [
												910
											]
										},
										"payload": {
											"properties": {
												"number": {
													"type": "number"
												}
											},
											"required": [
												"number"
											],
											"type": "object"
										}
									},
									"required": [
										"error_code",
										"payload"
									]
								}
							}
						}
					}
				},
				"tags": [
					"my-tag"
				],
				"security": []
			}
		},
		"/": {
			"delete": {
				"operationId": "Delete",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SuccessResponse_Datasource"
								}
							}
						}
					},
					"400": {
						"description": ""
					}
				},
				"tags": [
					"my-tag"
				],
				"security": []
			}
		},
		"/list": {
			"get": {
				"operationId": "list-operation",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string",
											"writeOnly": true,
											"pattern": "^([A-Z]+)"
										},
										"versions": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/DatasourceVersion"
											},
											"description": "This comment is used to test typoa"
										},
										"version": {
											"$ref": "#/components/schemas/DatasourceVersion"
										},
										"id": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"my-tag",
					"list-tag"
				],
				"security": []
			}
		},
		"/missing": {
			"post": {
				"operationId": "Missing",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"tuple": {
											"type": "array",
											"items": {
												"oneOf": [
													{
														"type": "string"
													},
													{
														"type": "number"
													}
												]
											}
										},
										"bool": {
											"type": "boolean"
										},
										"nullable": {
											"type": "string",
											"nullable": true
										},
										"optional": {
											"type": "number"
										},
										"enumLiteral": {
											"type": "string",
											"enum": [
												"foo"
											]
										}
									},
									"required": [
										"tuple",
										"bool",
										"nullable",
										"enumLiteral"
									]
								}
							}
						}
					},
					"400": {
						"description": "Description for my response",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error_code": {
											"type": "number",
											"enum": [
												910
											]
										},
										"payload": {
											"properties": {
												"number": {
													"type": "number"
												}
											},
											"required": [
												"number"
											],
											"type": "object"
										}
									},
									"required": [
										"error_code",
										"payload"
									]
								}
							}
						}
					}
				},
				"tags": [
					"my-tag"
				],
				"security": []
			}
		},
		"/no-required/{id}": {
			"get": {
				"operationId": "NoRequired",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"schema": {
							"type": "string"
						},
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"foo": {
											"type": "string"
										},
										"barReadonly": {
											"type": "number",
											"readOnly": true
										},
										"unknown": {
											"$ref": "#/components/schemas/AnyValue"
										},
										"void": {
											"type": "object"
										}
									},
									"required": [
										"unknown",
										"void"
									]
								}
							}
						}
					}
				},
				"tags": [
					"my-tag"
				],
				"security": []
			}
		},
		"/file": {
			"post": {
				"operationId": "File",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						}
					}
				},
				"tags": [
					"my-tag"
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"file": {
										"type": "string",
										"format": "binary"
									},
									"readonlyComment": {
										"type": "string",
										"readOnly": true
									}
								},
								"required": [
									"file",
									"readonlyComment"
								]
							}
						}
					}
				},
				"security": [
					{
						"company": [
							"my-scope"
						]
					}
				]
			}
		},
		"/getters": {
			"patch": {
				"operationId": "Getters",
				"parameters": [
					{
						"name": "limit",
						"in": "query",
						"schema": {
							"type": "number",
							"default": 20,
							"minimum": 1
						},
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						}
					}
				},
				"tags": [
					"my-tag"
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GettersClass_Partial"
							}
						}
					}
				},
				"security": [
					{
						"company": []
					}
				]
			}
		},
		"/foo": {
			"post": {
				"operationId": "foo-get",
				"parameters": [],
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"tags": [
					"my-tag"
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Foo"
							}
						}
					}
				},
				"security": []
			}
		},
		"/undefined": {
			"get": {
				"deprecated": true,
				"operationId": "Undefined",
				"parameters": [],
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"tags": [
					"my-tag"
				],
				"security": []
			}
		}
	},
	"components": {
		"schemas": {
			"Foo": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					}
				},
				"required": [
					"name"
				]
			},
			"SuccessResponse_Datasource": {
				"type": "object",
				"properties": {
					"date": {
						"type": "string",
						"format": "date-time",
						"example": "2020-10-30T19:02:06.523Z"
					},
					"data": {
						"$ref": "#/components/schemas/Datasource"
					}
				},
				"required": [
					"date",
					"data"
				]
			},
			"Datasource_Without_Version_Versions": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"writeOnly": true,
						"pattern": "^([A-Z]+)"
					}
				},
				"required": [
					"name"
				]
			},
			"DatasourceVersion": {
				"type": "object",
				"properties": {
					"type": {
						"type": "string"
					}
				},
				"required": [
					"type"
				]
			},
			"MyEnum": {
				"type": "string",
				"enum": [
					"foo",
					"bar"
				]
			},
			"CustomExportedEnum": {
				"type": "number",
				"enum": [
					0,
					1
				]
			},
			"Datasource": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"writeOnly": true,
						"pattern": "^([A-Z]+)"
					},
					"versions": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/DatasourceVersion"
						},
						"description": "This comment is used to test typoa"
					},
					"version": {
						"allOf": [
							{
								"$ref": "#/components/schemas/DatasourceVersion"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"name",
					"versions",
					"version"
				]
			},
			"GettersClass_Partial": {
				"type": "object",
				"properties": {
					"fooGet": {
						"type": "string",
						"readOnly": true
					},
					"fooReadonly": {
						"type": "string",
						"readOnly": true
					},
					"fooReadonlyComment": {
						"description": "my comment",
						"allOf": [
							{
								"$ref": "#/components/schemas/TestRefReadonlyAndTags"
							}
						],
						"readOnly": true
					},
					"barGetAndSet": {
						"type": "string"
					}
				}
			},
			"TestRefReadonlyAndTags": {
				"type": "object",
				"properties": {
					"foo": {
						"type": "string"
					}
				},
				"required": [
					"foo"
				]
			},
			"AnyValue": {
				"description": "Can be any value",
				"nullable": true
			},
			"C": {
				"oneOf": [
					{
						"type": "string",
						"enum": [
							"a"
						]
					},
					{
						"type": "string",
						"enum": [
							"b"
						]
					}
				]
			}
		},
		"securitySchemes": {
			"company": {
				"type": "apiKey",
				"name": "x-company-id",
				"in": "header"
			}
		}
	}
}